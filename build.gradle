buildscript {
    ext {
        springBootVersion = '1.5.9.RELEASE'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven'
apply plugin: 'signing'

configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

group 'com.windhc'
version '1.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
}

dependencies {
    compile "org.springframework.boot:spring-boot-autoconfigure"
    provided("org.springframework.boot:spring-boot-starter-web")

    optional "org.springframework.boot:spring-boot-configuration-processor"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileJava.dependsOn(processResources)

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = POM_GROUP_ID
            pom.artifactId = POM_ARTIFACT_ID
            pom.version = POM_VERSION

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUserName, password: sonatypePwd)
            }

            pom.project {
                name POM_NAME
                packaging POM_PACKAGING
                description POM_DESCRIPTION
                url POM_URL

                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }

                licenses {
                    license {
                        name POM_LICENCE_NAME
                        url POM_LICENCE_URL
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id POM_DEVELOPER_ID
                        name POM_DEVELOPER_NAME
                    }
                }
            }
        }
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javaDocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javaDocJar(type: Jar, dependsOn: javaDocs) {
    classifier = 'javadoc'
    from javaDocs.destinationDir
}

artifacts {
    archives sourceJar
    archives javaDocJar
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}