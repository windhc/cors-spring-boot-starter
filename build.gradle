buildscript {
    ext {
        springBootVersion = '1.5.8.RELEASE'
    }
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'io.spring.gradle:propdeps-plugin:0.0.9.RELEASE'
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'maven-publish'//添加Maven发布插件
configure(allprojects) {
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'propdeps-idea'
    apply plugin: 'propdeps-eclipse'
}

group 'com.windhc'
version '1.0.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public' }
}

dependencies {
    compile "org.springframework.boot:spring-boot-autoconfigure"
    provided("org.springframework.boot:spring-boot-starter-web")

    optional "org.springframework.boot:spring-boot-configuration-processor"

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileJava.dependsOn(processResources)

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

// 打包
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourceJar {
                classifier "sources"
            }
        }
    }
}
// 如果是发行版本，则上传到发行库。否则上传到快照库。
def postfixUrl = "service/local/staging/deploy/maven2"
if (project.version.endsWith("-SNAPSHOT")) {
    postfixUrl = "content/repositories/snapshots"
}
// 发布到本地Maven库和远程Maven服务器
publishing {
    repositories {
        mavenLocal()
        maven {
            credentials {
                username sonatypeUserName
                password sonatypePwd
            }
            url "https://oss.sonatype.org/$postfixUrl/"
        }
    }
}